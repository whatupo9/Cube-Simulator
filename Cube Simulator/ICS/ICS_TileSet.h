/*

ICS_Tileset.h

	Created: 2023-01-27

	Change log:

		2023-01-27
			- created class as a solution to texture bleeding in sprite sheets
			- a single image file is loaded and broken up into a set of textures that can be used by animated sprites

		2023-01-28
			- ICS_Tileset now inherits from ICS_Resource so it can be notified when the game is initialized
			- added tileset bank for re-using tilesets that already exist

		2024-01-21
			- fixed a crash that occured on exit when the tileset bank was destroyed when there were still tilesets in it
			- simplified tileset bank management
			- added a function to flush the tileset bank, freeing any tilesets that are not in use

		2024-01-23
			- removed onGameInitialized function as ICS_Resource automatically calls initilize for the tileset

		2024-02-09
			- added a function to retrieve a texture by index
			- refactoring: use x, y, width, height instead of rows and columns

*/

#pragma once

#include <string>			// for the file name of the image
#include <map>				// for std::map... for mapping filenames to tilesets

#include "ICS_Resource.h"	// ICS_Tileset inherits from ICS_Resource

class ICS_Texture;			// each tile is represented using a texture 

/**
 * A set of textures generated by breaking a texture into tiles.
 */
class ICS_Tileset : public ICS_Resource
{

private:

	std::string _fileName;		// The name of the file containing the image for the tileset.
	int _tileWidth;				// The width of each tile (in pixels).
	int _tileHeight;			// The height of each tile (in pixels).
	int _width;					// The width of the tileset (in tiles).
	int _height;				// The height of the tileset (in tiles).

	ICS_Texture*** _textures;	// The textures representing each tile.

	int _referenceCount;		// Tracks how many objects are using this tileset.

// tileset bank management

	// a map from file name to tilesets so tilesets can be re-used
	static std::map<std::tuple<std::string, int, int>, ICS_Tileset*>* _tilesetBank;

public:

	/**
	 * Creates a tileset.
	 *
	 * @param filename		The name of the file containing the image for the tileset.
	 * @param tileWidth		The width of each tile in pixels.
	 * @param tileHeight	The height of each tile in pixels.
	 */
	static ICS_Tileset* createTileset(std::string filename, int tileWidth, int tileHeight);

	/**
	 * Deletes the tileset.
	 *
	 * @param tileset		The tileset to delete.
	 */
	static void deleteTileset(ICS_Tileset* tileset);

	/**
	 * Deletes all unused tilesets stored in the bank to free memory.
	 */
	static void flushTilesetBank();

private:

	/**
	 * The ICS_Tileset constructor.
	 *
	 * @param fileName		The name of the file containing the image for the tileset.
	 * @param tileWidth		The width of each tile in pixels.
	 * @param tileHeight	The height of each tile in pixels.
	 */
	ICS_Tileset(std::string fileName, int tileWidth, int tileHeight);

	/**
	 * The ICS_Tileset destructor.
	 */
	~ICS_Tileset();

public:

// getters

	/**
	 * Returns the width of the tileset.
	 *
	 * @returns		The width of the tileset (in tiles).
	 */
	int getWidth()
	{
		return _width;
	}

	/**
	 * Returns the height of the tileset.
	 *
	 * @returns		The height of the tileset (in tiles).
	 */
	int getHeight()
	{
		return _height;
	}

	/**
	 * Returns the texture for the tile at the specified index.
	 * The texture is deleted when the tile set is deleted.
	 *
	 * @param index		The index of the tile.
	 *
	 * @returns			The requested texture or NULL if the index is invalid.
	 */
	ICS_Texture* getTexture(int index);

	/**
	 * Returns the texture for the tile at the specified location.
	 * The texture is deleted when the tile set is deleted.
	 *
	 * @param x		The horizontal position of the tile.
	 * @param y		The vertical position of the tile.
	 *
	 * @returns		The requested texture or NULL if the row and column are invalid.
	 */
	ICS_Texture* getTexture(int x, int y);

private:

// helpers

	/**
	 * Prepares the tileset for rendering.  Should be called after the graphics pipeline is initialized and before the tileset is used.
	 */
	void initialize();

};